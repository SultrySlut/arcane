-- Enemy Highlighter Script with Draggable GUI Controls and Anchor Toggle
-- Highlights and expands HumanoidRootParts of enemies within range
-- Press "." to anchor/unanchor all HumanoidRootParts

local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local TweenService = game:GetService('TweenService')
local UserInputService = game:GetService('UserInputService')
local Workspace = game:GetService('Workspace')
local LocalPlayer = Players.LocalPlayer

-- Configuration
local settings = {
    enabled = false,
    range = 1000,
    hitboxSize = 1, -- Starting at 1,1,1
    highlightColor = Color3.fromRGB(255, 0, 0),
    transparency = 0.8,
    showRangeCircle = true,
}

-- Storage
local highlightedParts = {}
local rangeCircleParts = {}
local updateConnection = nil
local anchorsEnabled = false -- Track anchor state

-- Create GUI
local ScreenGui = Instance.new('ScreenGui')
ScreenGui.Name = 'EnemyHighlighterGUI'
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game:GetService('CoreGui')

-- Main Frame
local MainFrame = Instance.new('Frame')
MainFrame.Size = UDim2.new(0, 300, 0, 450) -- Increased height for anchor button
MainFrame.Position = UDim2.new(0, 10, 0.5, -225)
MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui

local MainCorner = Instance.new('UICorner')
MainCorner.CornerRadius = UDim.new(0, 12)
MainCorner.Parent = MainFrame

-- Make GUI Draggable
local dragging = false
local dragStart = nil
local startPos = nil

local function updateInput(input)
    local delta = input.Position - dragStart
    MainFrame.Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end

MainFrame.InputBegan:Connect(function(input)
    if
        input.UserInputType == Enum.UserInputType.MouseButton1
        or input.UserInputType == Enum.UserInputType.Touch
    then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

MainFrame.InputChanged:Connect(function(input)
    if
        dragging
        and (
            input.UserInputType == Enum.UserInputType.MouseMovement
            or input.UserInputType == Enum.UserInputType.Touch
        )
    then
        updateInput(input)
    end
end)

-- Title
local TitleLabel = Instance.new('TextLabel')
TitleLabel.Size = UDim2.new(1, 0, 0, 40)
TitleLabel.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
TitleLabel.BorderSizePixel = 0
TitleLabel.Text = 'Enemy Expander - Drag to Move'
TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleLabel.TextScaled = true
TitleLabel.Font = Enum.Font.SourceSansBold
TitleLabel.Parent = MainFrame

local TitleCorner = Instance.new('UICorner')
TitleCorner.CornerRadius = UDim.new(0, 12)
TitleCorner.Parent = TitleLabel

-- Toggle Button
local ToggleButton = Instance.new('TextButton')
ToggleButton.Size = UDim2.new(0.8, 0, 0, 40)
ToggleButton.Position = UDim2.new(0.1, 0, 0, 60)
ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
ToggleButton.Text = 'Disabled'
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.TextScaled = true
ToggleButton.Font = Enum.Font.SourceSansBold
ToggleButton.Parent = MainFrame

local ToggleCorner = Instance.new('UICorner')
ToggleCorner.CornerRadius = UDim.new(0, 8)
ToggleCorner.Parent = ToggleButton

-- Anchor Toggle Button
local AnchorButton = Instance.new('TextButton')
AnchorButton.Size = UDim2.new(0.8, 0, 0, 35)
AnchorButton.Position = UDim2.new(0.1, 0, 0, 110)
AnchorButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
AnchorButton.Text = 'Anchors: OFF (Press "." to toggle)'
AnchorButton.TextColor3 = Color3.fromRGB(255, 255, 255)
AnchorButton.TextScaled = true
AnchorButton.Font = Enum.Font.SourceSans
AnchorButton.Parent = MainFrame

local AnchorCorner = Instance.new('UICorner')
AnchorCorner.CornerRadius = UDim.new(0, 8)
AnchorCorner.Parent = AnchorButton

-- Range Section
local RangeLabel = Instance.new('TextLabel')
RangeLabel.Size = UDim2.new(0.8, 0, 0, 25)
RangeLabel.Position = UDim2.new(0.1, 0, 0, 155)
RangeLabel.BackgroundTransparency = 1
RangeLabel.Text = 'Range: 1000 studs'
RangeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
RangeLabel.TextScaled = true
RangeLabel.Font = Enum.Font.SourceSans
RangeLabel.Parent = MainFrame

local RangeSlider = Instance.new('Frame')
RangeSlider.Size = UDim2.new(0.8, 0, 0, 20)
RangeSlider.Position = UDim2.new(0.1, 0, 0, 185)
RangeSlider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
RangeSlider.BorderSizePixel = 0
RangeSlider.Parent = MainFrame

local RangeSliderCorner = Instance.new('UICorner')
RangeSliderCorner.CornerRadius = UDim.new(0, 10)
RangeSliderCorner.Parent = RangeSlider

local RangeSliderButton = Instance.new('TextButton')
RangeSliderButton.Size = UDim2.new(0, 20, 1, 0)
RangeSliderButton.Position = UDim2.new(0.5, -10, 0, 0)
RangeSliderButton.BackgroundColor3 = Color3.fromRGB(100, 150, 255)
RangeSliderButton.Text = ''
RangeSliderButton.Parent = RangeSlider

local RangeButtonCorner = Instance.new('UICorner')
RangeButtonCorner.CornerRadius = UDim.new(0, 10)
RangeButtonCorner.Parent = RangeSliderButton

-- Hitbox Size Section
local SizeLabel = Instance.new('TextLabel')
SizeLabel.Size = UDim2.new(0.8, 0, 0, 25)
SizeLabel.Position = UDim2.new(0.1, 0, 0, 220)
SizeLabel.BackgroundTransparency = 1
SizeLabel.Text = 'Hitbox Size: 1 x 1 x 1'
SizeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
SizeLabel.TextScaled = true
SizeLabel.Font = Enum.Font.SourceSans
SizeLabel.Parent = MainFrame

local SizeSlider = Instance.new('Frame')
SizeSlider.Size = UDim2.new(0.8, 0, 0, 20)
SizeSlider.Position = UDim2.new(0.1, 0, 0, 250)
SizeSlider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
SizeSlider.BorderSizePixel = 0
SizeSlider.Parent = MainFrame

local SizeSliderCorner = Instance.new('UICorner')
SizeSliderCorner.CornerRadius = UDim.new(0, 10)
SizeSliderCorner.Parent = SizeSlider

local SizeSliderButton = Instance.new('TextButton')
SizeSliderButton.Size = UDim2.new(0, 20, 1, 0)
SizeSliderButton.Position = UDim2.new(0, -10, 0, 0)
SizeSliderButton.BackgroundColor3 = Color3.fromRGB(100, 150, 255)
SizeSliderButton.Text = ''
SizeSliderButton.Parent = SizeSlider

local SizeButtonCorner = Instance.new('UICorner')
SizeButtonCorner.CornerRadius = UDim.new(0, 10)
SizeButtonCorner.Parent = SizeSliderButton

-- Color Section
local ColorLabel = Instance.new('TextLabel')
ColorLabel.Size = UDim2.new(0.8, 0, 0, 25)
ColorLabel.Position = UDim2.new(0.1, 0, 0, 285)
ColorLabel.BackgroundTransparency = 1
ColorLabel.Text = 'Highlight Color'
ColorLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
ColorLabel.TextScaled = true
ColorLabel.Font = Enum.Font.SourceSans
ColorLabel.Parent = MainFrame

local ColorFrame = Instance.new('Frame')
ColorFrame.Size = UDim2.new(0.8, 0, 0, 30)
ColorFrame.Position = UDim2.new(0.1, 0, 0, 315)
ColorFrame.BackgroundColor3 = settings.highlightColor
ColorFrame.BorderSizePixel = 0
ColorFrame.Parent = MainFrame

local ColorCorner = Instance.new('UICorner')
ColorCorner.CornerRadius = UDim.new(0, 8)
ColorCorner.Parent = ColorFrame

-- Color Preset Buttons
local colorPresets = {
    { color = Color3.fromRGB(255, 0, 0), name = 'Red' },
    { color = Color3.fromRGB(0, 255, 0), name = 'Green' },
    { color = Color3.fromRGB(0, 0, 255), name = 'Blue' },
    { color = Color3.fromRGB(255, 255, 0), name = 'Yellow' },
    { color = Color3.fromRGB(255, 0, 255), name = 'Magenta' },
    { color = Color3.fromRGB(0, 255, 255), name = 'Cyan' },
}

local colorButtonsFrame = Instance.new('Frame')
colorButtonsFrame.Size = UDim2.new(0.8, 0, 0, 30)
colorButtonsFrame.Position = UDim2.new(0.1, 0, 0, 350)
colorButtonsFrame.BackgroundTransparency = 1
colorButtonsFrame.Parent = MainFrame

for i, preset in ipairs(colorPresets) do
    local colorButton = Instance.new('TextButton')
    colorButton.Size = UDim2.new(0.15, 0, 1, 0)
    colorButton.Position = UDim2.new((i - 1) * 0.17, 0, 0, 0)
    colorButton.BackgroundColor3 = preset.color
    colorButton.Text = ''
    colorButton.Parent = colorButtonsFrame

    local buttonCorner = Instance.new('UICorner')
    buttonCorner.CornerRadius = UDim.new(0, 4)
    buttonCorner.Parent = colorButton

    colorButton.MouseButton1Click:Connect(function()
        settings.highlightColor = preset.color
        ColorFrame.BackgroundColor3 = preset.color
        updateHighlights()
    end)
end

-- Show Range Circle Toggle
local RangeCircleButton = Instance.new('TextButton')
RangeCircleButton.Size = UDim2.new(0.8, 0, 0, 35)
RangeCircleButton.Position = UDim2.new(0.1, 0, 0, 390)
RangeCircleButton.BackgroundColor3 = Color3.fromRGB(100, 200, 100)
RangeCircleButton.Text = 'Range Circle: ON'
RangeCircleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
RangeCircleButton.TextScaled = true
RangeCircleButton.Font = Enum.Font.SourceSans
RangeCircleButton.Parent = MainFrame

local RangeCircleCorner = Instance.new('UICorner')
RangeCircleCorner.CornerRadius = UDim.new(0, 8)
RangeCircleCorner.Parent = RangeCircleButton

-- Function to toggle anchors on all HumanoidRootParts
local function toggleAnchors()
    anchorsEnabled = not anchorsEnabled
    
    local enemiesFolder = Workspace:FindFirstChild('Enemies')
    if not enemiesFolder then
        print("No Enemies folder found")
        return
    end
    
    -- Update button appearance first
    if anchorsEnabled then
        AnchorButton.Text = 'Anchors: ON (Press "." to toggle)'
        AnchorButton.BackgroundColor3 = Color3.fromRGB(100, 200, 100)
        startUpdateLoop() -- Start continuous checking
    else
        AnchorButton.Text = 'Anchors: OFF (Press "." to toggle)'
        AnchorButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
        
        -- Unanchor all enemies when turning OFF
        local count = 0
        for _, enemy in pairs(enemiesFolder:GetChildren()) do
            local humanoidRootPart = enemy:FindFirstChild('HumanoidRootPart')
            if humanoidRootPart and humanoidRootPart.Anchored then
                humanoidRootPart.Anchored = false
                count = count + 1
            end
        end
        
        stopUpdateLoop() -- Stop if both highlighting and anchoring are off
        
        print("Unanchored", count, "HumanoidRootParts")
        
        -- Send notification
        game.StarterGui:SetCore('SendNotification', {
            Title = 'Anchor Toggle',
            Text = "Unanchored " .. count .. " enemies",
            Duration = 2,
        })
        
        return
    end
    
    print("Anchor mode enabled - will continuously freeze enemies within", settings.range, "studs")
    
    -- Send notification
    game.StarterGui:SetCore('SendNotification', {
        Title = 'Anchor Toggle',
        Text = "Anchor mode ON - enemies in range will be frozen",
        Duration = 3,
    })
end

-- Input handling for "." key
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.Period then
        toggleAnchors()
    end
end)

-- Anchor Button click handler (alternative to key press)
AnchorButton.MouseButton1Click:Connect(function()
    toggleAnchors()
end)

-- Create range circle outline
local function createRangeCircle()
    -- Clear existing circle parts
    for _, part in pairs(rangeCircleParts) do
        if part then
            part:Destroy()
        end
    end
    rangeCircleParts = {}

    local segments = 104 -- Number of segments for the circle
    local angleStep = (math.pi * 2) / segments
    local thickness = 5 -- Thickness of the outline

    for i = 1, segments do
        local angle1 = angleStep * (i - 1)
        local angle2 = angleStep * i

        local part = Instance.new('Part')
        part.Name = 'RangeCircleSegment'
        part.Material = Enum.Material.Neon
        part.BrickColor = BrickColor.new(Color3.fromRGB(225, 105, 180))
        part.Anchored = true
        part.CanCollide = false
        part.Transparency = 0.3
        part.Size = Vector3.new(thickness, 2, thickness)
        part.Shape = Enum.PartType.Block
        part.Parent = Workspace

        table.insert(rangeCircleParts, part)
    end
end

-- Update range circle position
local function updateRangeCircle()
    if not settings.showRangeCircle or #rangeCircleParts == 0 then
        return
    end

    local character = LocalPlayer.Character
    if character and character:FindFirstChild('HumanoidRootPart') then
        local centerPos = character.HumanoidRootPart.Position
        local segments = #rangeCircleParts
        local angleStep = (math.pi * 2) / segments

        for i, part in ipairs(rangeCircleParts) do
            local angle = angleStep * (i - 1)
            local x = centerPos.X + math.cos(angle) * settings.range
            local z = centerPos.Z + math.sin(angle) * settings.range
            local y = centerPos.Y - 1 -- Slightly below player

            part.CFrame = CFrame.new(x, y, z)

            -- Make the part face the next segment to create a continuous outline
            local nextAngle = angleStep * i
            local nextX = centerPos.X + math.cos(nextAngle) * settings.range
            local nextZ = centerPos.Z + math.sin(nextAngle) * settings.range

            part.CFrame = CFrame.lookAt(
                Vector3.new(x, y, z),
                Vector3.new(nextX, y, nextZ)
            )

            -- Adjust size based on segment length
            local segmentLength = 2 * settings.range * math.sin(angleStep / 2)
            part.Size = Vector3.new(segmentLength, 2, 5)
        end
    end
end

-- Clear range circle
local function clearRangeCircle()
    for _, part in pairs(rangeCircleParts) do
        if part then
            part:Destroy()
        end
    end
    rangeCircleParts = {}
end

-- Create highlight for a part
local function createHighlight(originalPart)
    local highlight = Instance.new('Part')
    highlight.Name = 'EnemyHighlight'
    highlight.Size = Vector3.new(
        settings.hitboxSize,
        settings.hitboxSize,
        settings.hitboxSize
    )
    highlight.CFrame = originalPart.CFrame
    highlight.Anchored = false
    highlight.CanCollide = false
    highlight.Material = Enum.Material.ForceField
    highlight.BrickColor = BrickColor.new(settings.highlightColor)
    highlight.Transparency = settings.transparency
    highlight.Shape = Enum.PartType.Block -- Ensure it's a cube
    highlight.Parent = originalPart

    -- Create weld to attach to original part
    local weld = Instance.new('WeldConstraint')
    weld.Part0 = originalPart
    weld.Part1 = highlight
    weld.Parent = highlight

    return highlight
end

-- Update all highlights
local function updateHighlights()
    for original, highlight in pairs(highlightedParts) do
        if highlight and highlight.Parent then
            highlight.Size = Vector3.new(
                settings.hitboxSize,
                settings.hitboxSize,
                settings.hitboxSize
            )
            highlight.BrickColor = BrickColor.new(settings.highlightColor)
            highlight.Transparency = settings.transparency
        end
    end
end

-- Clear all highlights
local function clearHighlights()
    for _, highlight in pairs(highlightedParts) do
        if highlight then
            highlight:Destroy()
        end
    end
    highlightedParts = {}
end

-- Main update loop
local function updateEnemies()
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild('HumanoidRootPart') then
        return
    end

    local playerPos = character.HumanoidRootPart.Position
    local enemiesFolder = Workspace:FindFirstChild('Enemies')

    if not enemiesFolder then
        return
    end

    -- Track current enemies in range
    local currentEnemies = {}

    for _, enemy in pairs(enemiesFolder:GetChildren()) do
        local humanoidRootPart = enemy:FindFirstChild('HumanoidRootPart')
        if humanoidRootPart then
            local distance = (humanoidRootPart.Position - playerPos).Magnitude

            if distance <= settings.range then
                currentEnemies[humanoidRootPart] = true

                -- If anchor mode is ON, ensure enemies in range are anchored
                if anchorsEnabled and not humanoidRootPart.Anchored then
                    humanoidRootPart.Anchored = true
                end

                -- Create highlight if highlighting is enabled and doesn't exist
                if settings.enabled and not highlightedParts[humanoidRootPart] then
                    local existingHighlight =
                        humanoidRootPart:FindFirstChild('EnemyHighlight')
                    if existingHighlight then
                        existingHighlight:Destroy()
                    end
                    highlightedParts[humanoidRootPart] =
                        createHighlight(humanoidRootPart)
                end
            else
                -- If enemy is out of range and anchor mode is ON, unanchor it
                if anchorsEnabled and humanoidRootPart.Anchored then
                    humanoidRootPart.Anchored = false
                end
            end
        end
    end

    -- Remove highlights for enemies out of range or destroyed (only if highlighting is enabled)
    if settings.enabled then
        for part, highlight in pairs(highlightedParts) do
            if not currentEnemies[part] or not part.Parent then
                if highlight then
                    highlight:Destroy()
                end
                highlightedParts[part] = nil
            end
        end
    else
        clearHighlights()
    end

    -- Update range circle
    updateRangeCircle()
end

-- Toggle system
ToggleButton.MouseButton1Click:Connect(function()
    settings.enabled = not settings.enabled

    if settings.enabled then
        ToggleButton.Text = 'Enabled'
        ToggleButton.BackgroundColor3 = Color3.fromRGB(100, 200, 100)

        if settings.showRangeCircle then
            createRangeCircle()
        end
    else
        ToggleButton.Text = 'Disabled'
        ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 100, 100)

        clearHighlights()
        
        if not anchorsEnabled then
            clearRangeCircle()
        end
    end
end)

-- Start the update connection when either highlighting or anchoring is enabled
local function startUpdateLoop()
    if not updateConnection then
        updateConnection = RunService.Heartbeat:Connect(updateEnemies)
    end
end

-- Stop the update connection only when both highlighting and anchoring are disabled
local function stopUpdateLoop()
    if not settings.enabled and not anchorsEnabled and updateConnection then
        updateConnection:Disconnect()
        updateConnection = nil
    end
end

-- Range Circle Toggle
RangeCircleButton.MouseButton1Click:Connect(function()
    settings.showRangeCircle = not settings.showRangeCircle

    if settings.showRangeCircle then
        RangeCircleButton.Text = 'Range Circle: ON'
        RangeCircleButton.BackgroundColor3 = Color3.fromRGB(100, 200, 100)
        if settings.enabled then
            createRangeCircle()
        end
    else
        RangeCircleButton.Text = 'Range Circle: OFF'
        RangeCircleButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
        clearRangeCircle()
    end
end)

-- Slider functionality
local function setupSlider(
    slider,
    button,
    minValue,
    maxValue,
    currentValue,
    callback
)
    local sliderDragging = false

    button.MouseButton1Down:Connect(function()
        sliderDragging = true
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            sliderDragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if
            sliderDragging
            and input.UserInputType == Enum.UserInputType.MouseMovement
        then
            local mouse = LocalPlayer:GetMouse()
            local relativeX = mouse.X - slider.AbsolutePosition.X
            local percentage =
                math.clamp(relativeX / slider.AbsoluteSize.X, 0, 1)

            button.Position = UDim2.new(percentage, -10, 0, 0)

            local value = minValue + (maxValue - minValue) * percentage
            callback(value)
        end
    end)
end

-- Setup range slider
setupSlider(
    RangeSlider,
    RangeSliderButton,
    100,
    3000,
    settings.range,
    function(value)
        settings.range = math.floor(value)
        RangeLabel.Text = 'Range: ' .. settings.range .. ' studs'
        updateRangeCircle()
    end
)

-- Setup size slider (1 to 100 for cube size)
setupSlider(
    SizeSlider,
    SizeSliderButton,
    1,
    100,
    settings.hitboxSize,
    function(value)
        settings.hitboxSize = math.floor(value)
        SizeLabel.Text = 'Hitbox Size: '
            .. settings.hitboxSize
            .. ' x '
            .. settings.hitboxSize
            .. ' x '
            .. settings.hitboxSize
        updateHighlights()
    end
)

-- Start with the update loop since anchoring might be enabled
startUpdateLoop()

-- Notification
game.StarterGui:SetCore('SendNotification', {
    Title = 'Enemy Expander',
    Text = 'Press "." to toggle anchors. Draggable GUI Controls Ready',
    Duration = 4,
})
